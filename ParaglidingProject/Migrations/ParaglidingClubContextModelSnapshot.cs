// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParaglidingProject.Data;

namespace ParaglidingProject.Migrations
{
    [DbContext(typeof(ParaglidingClubContext))]
    partial class ParaglidingClubContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ParaglidingProject.Models.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CoursePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LicenseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("LicenseID");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("ParaglidingProject.Models.Flight", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FlightDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FlightEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FlightStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParaglidingID")
                        .HasColumnType("int");

                    b.Property<int>("PilotID")
                        .HasColumnType("int");

                    b.Property<int>("SiteID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ParaglidingID");

                    b.HasIndex("PilotID");

                    b.HasIndex("SiteID");

                    b.ToTable("Flight");
                });

            modelBuilder.Entity("ParaglidingProject.Models.Level", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DifficultyNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skill")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Level");
                });

            modelBuilder.Entity("ParaglidingProject.Models.License", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LevelID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LevelID");

                    b.ToTable("License");
                });

            modelBuilder.Entity("ParaglidingProject.Models.ModelParagliding", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AprovalNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeightParagliding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxWeightPilot")
                        .HasColumnType("int");

                    b.Property<int>("MinWeightPilot")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ModelParagliding");
                });

            modelBuilder.Entity("ParaglidingProject.Models.Obtaining", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsSucced")
                        .HasColumnType("bit");

                    b.Property<int>("LicenseID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ObtainingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PilotID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LicenseID");

                    b.HasIndex("PilotID");

                    b.ToTable("Obtaining");
                });

            modelBuilder.Entity("ParaglidingProject.Models.Paragliding", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfCommissioning")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfLastRevision")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModelParaglidingID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ModelParaglidingID");

                    b.ToTable("Paragliding");
                });

            modelBuilder.Entity("ParaglidingProject.Models.Participation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfParticipation")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<int>("PilotID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("PilotID");

                    b.ToTable("Particiption");
                });

            modelBuilder.Entity("ParaglidingProject.Models.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatePay")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<int>("PilotID")
                        .HasColumnType("int");

                    b.Property<int>("SubsciptionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PilotID");

                    b.HasIndex("SubsciptionID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("ParaglidingProject.Models.Pilot", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActif")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostitionID")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Pilot");
                });

            modelBuilder.Entity("ParaglidingProject.Models.Position", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PilotID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PilotID")
                        .IsUnique();

                    b.ToTable("Position");
                });

            modelBuilder.Entity("ParaglidingProject.Models.Site", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AltitudeTakeOff")
                        .HasColumnType("int");

                    b.Property<string>("FlightType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrientationLanding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrientationTakeOff")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LevelID");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("ParaglidingProject.Models.Subscription", b =>
                {
                    b.Property<int>("YearID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("YearID");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("ParaglidingProject.Models.Teaching", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("PilotID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("PilotID");

                    b.ToTable("Teaching");
                });

            modelBuilder.Entity("ParaglidingProject.Models.Course", b =>
                {
                    b.HasOne("ParaglidingProject.Models.License", "License")
                        .WithMany("Courses")
                        .HasForeignKey("LicenseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ParaglidingProject.Models.Flight", b =>
                {
                    b.HasOne("ParaglidingProject.Models.Paragliding", "Paragliding")
                        .WithMany("Flights")
                        .HasForeignKey("ParaglidingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ParaglidingProject.Models.Pilot", "Pilot")
                        .WithMany("Flights")
                        .HasForeignKey("PilotID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ParaglidingProject.Models.Site", "Site")
                        .WithMany("Flights")
                        .HasForeignKey("SiteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ParaglidingProject.Models.License", b =>
                {
                    b.HasOne("ParaglidingProject.Models.Level", "Level")
                        .WithMany("Licenses")
                        .HasForeignKey("LevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ParaglidingProject.Models.Obtaining", b =>
                {
                    b.HasOne("ParaglidingProject.Models.License", "License")
                        .WithMany("Obtainings")
                        .HasForeignKey("LicenseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ParaglidingProject.Models.Pilot", "Pilot")
                        .WithMany("Obtainings")
                        .HasForeignKey("PilotID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ParaglidingProject.Models.Paragliding", b =>
                {
                    b.HasOne("ParaglidingProject.Models.ModelParagliding", "ModelParagliding")
                        .WithMany("Paraglidings")
                        .HasForeignKey("ModelParaglidingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ParaglidingProject.Models.Participation", b =>
                {
                    b.HasOne("ParaglidingProject.Models.Course", "Course")
                        .WithMany("Participations")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ParaglidingProject.Models.Pilot", "Pilot")
                        .WithMany("Participations")
                        .HasForeignKey("PilotID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ParaglidingProject.Models.Payment", b =>
                {
                    b.HasOne("ParaglidingProject.Models.Pilot", "Pilot")
                        .WithMany("Payments")
                        .HasForeignKey("PilotID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ParaglidingProject.Models.Subscription", "Subscription")
                        .WithMany("Payments")
                        .HasForeignKey("SubsciptionID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ParaglidingProject.Models.Position", b =>
                {
                    b.HasOne("ParaglidingProject.Models.Pilot", "Pilot")
                        .WithOne("Position")
                        .HasForeignKey("ParaglidingProject.Models.Position", "PilotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParaglidingProject.Models.Site", b =>
                {
                    b.HasOne("ParaglidingProject.Models.Level", "Level")
                        .WithMany("Sites")
                        .HasForeignKey("LevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ParaglidingProject.Models.Teaching", b =>
                {
                    b.HasOne("ParaglidingProject.Models.Course", "Course")
                        .WithMany("Teachings")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ParaglidingProject.Models.Pilot", "Pilot")
                        .WithMany("Teachings")
                        .HasForeignKey("PilotID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
